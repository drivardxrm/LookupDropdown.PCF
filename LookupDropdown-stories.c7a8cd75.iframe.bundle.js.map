{"version":3,"file":"LookupDropdown-stories.c7a8cd75.iframe.bundle.js","mappings":"2yBASO,MAAMA,mBAAqB,EAAGC,WAAYC,aAE5C,mBAACC,WAAWC,SAAX,CAAoBC,MAAOJ,WACzBC,WAKFC,YAAa,QAAAG,oBAAiC,GAEvCC,cAAgB,KACpB,QAAAC,YAAWL,Y,gXCRb,MAAMM,kBAcXC,YAAaC,OA1Bf,4BA2BQA,QACFC,KAAKC,WAAaF,MAAME,WACxBD,KAAKE,QAAUH,MAAMG,QACrBF,KAAKG,OAASJ,MAAMG,QAAQE,WAAWC,YAAYC,YACnDN,KAAKO,WAAaR,MAAMG,QAAQM,KAAKC,qBAAsB,UAAAV,MAAMG,QAAQE,WAAWC,YAAYK,eAArC,KAA+CC,UAC1GX,KAAKY,WAAY,UAAAb,MAAMG,QAAQE,WAAWC,YAAYK,eAArC,KAA+CG,UAChEb,KAAKc,gBAAmE,SAAjDf,MAAMG,QAAQE,WAAWU,gBAAgBC,IAChEf,KAAKgB,cAAgB,UAAAjB,MAAMG,QAAQE,WAAWC,YAAYU,IAAI,IAAzC,QAA+C,EACpEf,KAAKiB,eAAwE,QAAvD,UAAAlB,MAAMG,QAAQE,WAAWc,2BAAzB,KAA+CH,KACjE,UAAAhB,MAAMG,QAAQE,WAAWc,2BAAzB,KAA+CH,IAAI,QACnD,EACJf,KAAKmB,oBAAuB,UAAApB,MAAMG,QAAQE,WAAWC,YAAoBe,wBAA7C,GAAuE,GACnGpB,KAAKqB,uBAA0B,UAAAtB,MAAMG,QAAQE,WAAWC,YAAoBgB,wBAA7C,GAAuE,GAClGrB,KAAKE,QAAQE,WAAWkB,WAAWP,MAErCf,KAAKuB,WAAavB,KAAKE,QAAQE,WAAWkB,WAAWP,IAAIS,QAAQ,OAAS,EAAI,UAAAxB,KAAKE,QAAQE,WAAWkB,WAAWP,IAAIU,MAAM,MAAMC,MAAKC,gBAAkBA,eAAeF,MAAM,MAAM,KAAOzB,KAAKE,QAAQ0B,aAAaC,WAAWC,mBAAjJ,KAA8JL,MAAM,MAAM,GAAKzB,KAAKE,QAAQE,WAAWkB,WAAWP,KAGlSf,KAAK+B,SAAWhC,MAAMgC,SAE1B,CAGAC,uBAlDF,UAoDI,OAAO,oBAAAhC,KAAKE,QAAQE,WAAWkB,WAAWP,UAAnC,KAAwCkB,MAAM,kBAA9C,GAAkE,EAC3E,CAEAC,aAvDF,OAwDI,MAAO,KAAK,UAAAlC,KAAKE,QAAQE,WAAW+B,iBAAiBpB,KAAzC,GAAgDf,KAAKE,QAAQkC,UAAUC,UAAU,aAC/F,CAEAC,WAAYC,OAAeC,OAAeC,SACxC,OAAOF,OAAOd,MAAMe,QAAQE,KAAKD,QACnC,CAEAE,cAAeC,OAAyCC,aAEtD,GAAK7C,KAAKuB,WAEH,CAEL,IAAID,WAAatB,KAAKuB,WASpB,OARAvB,KAAKgC,uBAAuBc,SAAQC,YAtE5C,UAwEU,MAAMC,cAAgB,oBAAAJ,OAAO,GAAGG,wDAAV,GACAH,OAAO,IAAIG,8DADX,GAEAH,OAAO,GAAGG,aAChCzB,WAAatB,KAAKsC,WAAWhB,WAAa,IAAIyB,aAAc,MAAAC,cAAAA,cAAiB,GAAG,IAG3E1B,UACX,CAbE,OAAOsB,OAAO,GAAGC,cAcrB,CAGAI,cAAeC,UAAkBL,YAAoBM,cACnD,MAAMC,WAAsB,CAACF,UAAWL,aAaxC,OAVA7C,KAAKgC,uBAAuBc,SAAQC,YAC7BK,WAAWC,SAASN,YACvBK,WAAWE,KAAKP,UAClB,IAIE/C,KAAKc,iBACPsC,WAAWE,KAAKH,cAEXC,UACT,CAEMG,iBAAkBC,WAAmBN,UAAkBL,YAAoBM,aAAqBM,SAAiBC,UAAyG,sCApGlO,mBAqGI,MACMC,aADS,IAAIC,WACQC,gBAAgBJ,SAAU,YAG/CK,cAAgBH,YAAYI,qBAAqB,UAAU,GAcjE,GAXAJ,YAAYK,iBAAiB,aAAalB,SAAQmB,IAAMA,GAAGC,WAC3DP,YAAYK,iBAAiB,kCAAkClB,SAAQmB,IAAMA,GAAGC,WAGhFlE,KAAKiD,cAAcC,UAAWL,YAAaM,cAAcL,SAAQC,YAC/D,MAAMoB,gBAAkBR,YAAYS,cAAc,aAClDD,gBAAgBE,aAAa,OAAQtB,WACrCe,cAAcQ,YAAYH,gBAAgB,IAIR,KAAhCnE,KAAKqB,wBACwB,KAA7BrB,KAAKmB,0BACmB,IAAxBnB,KAAKiB,gBACuB,MAA5B,UAAAjB,KAAKiB,qBAAL,KAAqBsD,IAAW,CAClC,MAAMC,sBAAwB,UAAAd,SAASe,6BAAT,KAAiCC,UAAU1E,KAAKqB,wBACxEsD,sBAAwB,UAAAjB,SAASkB,6BAAT,KAAiCF,UAAU1E,KAAKqB,wBACxEwD,uBAAyB,UAAAnB,SAASoB,8BAAT,KAAkCJ,UAAU1E,KAAKqB,wBAE1E0D,WAAaP,sBACfxE,KAAKgF,uBAAuBR,uBAC3BG,sBACG3E,KAAKiF,uBAAuBN,sBAAuBnB,YACnDxD,KAAKkF,wBAAwBL,uBAAwBrB,YAE7DM,cAAcQ,YAAYS,WAC5B,CAEA,MAAMI,gBAAiB,IAAIC,eAAgBC,kBAAkB1B,aACvD2B,aAAetF,KAAKE,QAAQqF,OAC/BC,wBAAwBhC,WAAY,aAAa2B,kBAEpD,OAAIG,OAAOG,SAE2C,SAAhDzF,KAAKE,QAAQE,WAAWsF,gBAAgB3E,IAEnC,UAAAuE,OAAOG,eAAP,KAAiBE,MAAK,CAACC,EAAGC,KAC/B,MAAMC,MAAQ9F,KAAK2C,cAAciD,EAAG/C,aAC9BkD,MAAQ/F,KAAK2C,cAAckD,EAAGhD,aACpC,OAAOiD,MAAME,cAAcD,MAAM,IAG9BT,OAAOG,SAET,EACT,IAEQT,uBAAwBR,uBA3JlC,UA4JI,MAAMyB,KAAO,GAAGjG,KAAKmB,wBACf+E,GAAK1B,sBAAsB2B,qBAE3BpB,WAAaqB,SAAShC,cAAc,eAC1CW,WAAWV,aAAa,OAAQrE,KAAKmB,qBACrC4D,WAAWV,aAAa,OAAQ4B,MAChClB,WAAWV,aAAa,KAAM6B,IAC9BnB,WAAWV,aAAa,QAAS,aAEjC,MAAMgC,OAASD,SAAShC,cAAc,UACtCiC,OAAOhC,aAAa,OAAQ,OAE5B,MAAMiC,UAAYF,SAAShC,cAAc,aASzC,OARAkC,UAAUjC,aAAa,YAAa,GAAGrE,KAAKmB,yBAC5CmF,UAAUjC,aAAa,WAAY,MACnCiC,UAAUjC,aAAa,SAAUrE,KAAKmB,qBACtCmF,UAAUjC,aAAa,QAAS,oBAAArE,KAAKiB,qBAAL,KAAqBsD,IAArB,GAA2B,IAE3D8B,OAAO/B,YAAYgC,WACnBvB,WAAWT,YAAY+B,QAEhBtB,UACT,CAEQE,uBAAwBN,sBAA2B4B,gBApL7D,UAqLI,MAAMN,KAAOtB,sBAAsBwB,qBAC7BD,GAAK,GAAGK,mBAERxB,WAAaqB,SAAShC,cAAc,eAC1CW,WAAWV,aAAa,OAAQrE,KAAKmB,qBACrC4D,WAAWV,aAAa,OAAQ4B,MAChClB,WAAWV,aAAa,KAAM6B,IAC9BnB,WAAWV,aAAa,QAAS,aAEjC,MAAMgC,OAASD,SAAShC,cAAc,UACtCiC,OAAOhC,aAAa,OAAQ,OAE5B,MAAMiC,UAAYF,SAAShC,cAAc,aASzC,OARAkC,UAAUjC,aAAa,YAAa,GAAGrE,KAAKmB,yBAC5CmF,UAAUjC,aAAa,WAAY,MACnCiC,UAAUjC,aAAa,SAAUrE,KAAKmB,qBACtCmF,UAAUjC,aAAa,QAAS,oBAAArE,KAAKiB,qBAAL,KAAqBsD,IAArB,GAA2B,IAE3D8B,OAAO/B,YAAYgC,WACnBvB,WAAWT,YAAY+B,QAEhBtB,UACT,CAEQG,wBAAyBL,uBAA4B0B,gBA7M/D,UA8MI,MAAMC,gBAAkB3B,uBAAuB4B,oBACzCC,gBAAkB7B,uBAAuB8B,qBAAuBJ,eAClE1B,uBAAuB+B,0BACvB/B,uBAAuBgC,0BAErBC,gBAAkBjC,uBAAuB8B,qBAAuBJ,eAClE1B,uBAAuBkC,mBACvBlC,uBAAuB8B,mBAErBK,sBAAwBnC,uBAAuB8B,qBAAuBJ,eACxE1B,uBAAuBgC,0BACvBhC,uBAAuB+B,0BAErBK,YAAcb,SAAShC,cAAc,eAC3C6C,YAAY5C,aAAa,OAAQmC,iBACjCS,YAAY5C,aAAa,OAAQqC,iBACjCO,YAAY5C,aAAa,KAAMqC,iBAE/B,MAAMQ,YAAcd,SAAShC,cAAc,eAC3C8C,YAAY7C,aAAa,OAAQyC,iBACjCI,YAAY7C,aAAa,OAAQ2C,uBACjCE,YAAY7C,aAAa,KAAM2C,uBAC/BE,YAAY7C,aAAa,QAAS,aAElC,MAAMgC,OAASD,SAAShC,cAAc,UACtCiC,OAAOhC,aAAa,OAAQ,OAE5B,MAAMiC,UAAYF,SAAShC,cAAc,aASzC,OARAkC,UAAUjC,aAAa,YAAa2C,uBACpCV,UAAUjC,aAAa,WAAY,MACnCiC,UAAUjC,aAAa,SAAUyC,iBACjCR,UAAUjC,aAAa,QAAS,oBAAArE,KAAKiB,qBAAL,KAAqBsD,IAArB,GAA2B,IAE3D8B,OAAO/B,YAAYgC,WACnBY,YAAY5C,YAAY+B,QACxBY,YAAY3C,YAAY4C,aACjBD,WACT,CAEME,gBAA6D,sCACjE,aAAanH,KAAKE,QAAQqF,OACvB6B,eAAe,aAAcpH,KAAKG,OAAQ,qCAC/C,IAEMkH,kBAAmB7D,YAA+E,sCAEtG,OAAOxD,KAAKE,QAAQoH,MAAMD,kBAAkB7D,WAC9C,IAEM+D,WAAY/D,YAAqF,sCA/PzG,UAgQI,OAAOxD,KAAKE,QAAQsH,WAAWC,SAC7B,CACEC,WAAYlE,WACZmE,SAAU,oBAAA3H,KAAKgB,oBAAL,KAAoBuD,IAApB,GAA0B,IAG1C,K,8MClQK,MAAMqD,cAAgB,KAC3B,MAAMvI,WAAaM,iBAEb,KAAM,UAAW,UAErB,mBAAAkI,UACE,CAAC,aAAcxI,WAAWY,aAC1B,IAAMZ,WAAW8H,iBACjB,CACEW,UAAWC,MAIjB,MAAO,CACLtE,SAAU,MAAAuE,UAAA,EAAAA,KAAMvE,SAChBD,WAAY,MAAAwE,UAAA,EAAAA,KAAMC,iBAClBC,UACAC,QACD,EChBGC,eAA6B,CAAEC,SAAU,mBAgB/C,4BAdyB,KACvB,MAAMhJ,WAAaM,iBACb,YAAiBiI,gBAEvB,OAAO,mBAACU,WAAA,GACEC,UAAWH,eACXI,MAAM,cACNC,UAAU,cACVC,cAAuC,IAA7BrJ,WAAW2B,cACrB2H,QAAS,KACPtJ,WAAWkI,WAAW/D,WAAW,GAErC,E,wMCfH,MAAMoF,YAAepF,aAC1B,MAAMnE,WAAaM,iBAEb,KAAM,UAAW,UACrB,mBAAAkI,UACE,CAAC,WAAYrE,WAAYnE,WAAWY,aACpC,IAAMZ,WAAWgI,kBAAkB7D,aACnC,CACEqF,QAASrF,kBAAkE,KAAfA,WAC5DsE,UAAWC,MAIjB,MAAO,CACLrE,SAAUsE,KACV9E,UAAW,MAAA8E,UAAA,EAAAA,KAAMc,mBACjBjG,YAAa,MAAAmF,UAAA,EAAAA,KAAMe,qBACnB5F,aAAc,MAAA6E,UAAA,EAAAA,KAAMgB,sBACpBC,uBAAwB,MAAAjB,UAAA,EAAAA,KAAMvD,uBAC9ByE,uBAAwB,MAAAlB,UAAA,EAAAA,KAAMpD,uBAC9BsD,UACAC,QACD,ECDUgB,oBAAsB,KACjC,MAAM9J,WAAaM,iBACb,QAAS,UAAW,SApBF,MAR1B,OASE,MAAMN,WAAaM,iBACb,WAAY,UAAeiI,iBAC3B,UAAW,YAAa,aAAc,UAAegB,YAAYpF,aAEjE,KAAM,UAAW,UACrB,mBAAAqE,UACE,CAAC,gBAAiBxI,WAAWY,WAAY,UAAAZ,WAAW4B,qBAAX,KAA2BsD,KACpE,IAAMlF,WAAWkE,iBAAiBC,WAAYN,UAAWL,YAAaM,aAAcM,SAAUC,WAC9F,CACEmF,UAAWrF,cAAgBN,aAAeO,SAC1CqE,UAAWC,MAIjB,MAAO,CAAEqB,QAASpB,KAAME,UAAWC,QAAS,EAKJkB,IAClC,YAAiBzB,iBACjB,UAAW,YAAa,cAAmBgB,YAAYpF,YAkB7D,MAAO,CAAE8F,QAhByBF,QAC9B,CAAC,CAAEG,KAAM,EAAGC,KAAMnK,WAAW6C,eAAgBuH,OAAOL,QAAQM,KAAIC,IAC9D,MAAMC,SAAgC,OAArB,MAAAD,OAAA,EAAAA,EAAIxG,oBACjB,EACA,0BAA0B,MAAAwG,OAAA,EAAAA,EAAIxG,gBAClC,MAAO,CACLoG,IAAKI,EAAE,GAAGzG,aACVsG,KAAMnK,WAAWsD,cAAcgH,EAAG9G,aAClCmF,KAAM,CACJ4B,SACAC,WAAYF,EAAE,GAAG9G,gBAEpB,KAEH,CAAC,CAAE0G,KAAM,EAAGC,KAAMnK,WAAW6C,eAEfgG,UAAWC,QAAS,EC7CjC,MAAM2B,eAAgB,E,yEAAA,GAAY,CACvCC,QAAS,CACPC,aAAc,UACdC,gBAAiB,UACjBC,aAAc,UACdC,WAAY,UACZC,cAAe,UACfC,eAAgB,UAChBC,aAAc,UACdC,UAAW,UACXC,YAAa,UACbC,kBAAmB,UACnBC,eAAgB,UAChBC,aAAc,UACdC,qBAAsB,UACtBC,kBAAmB,UACnBC,mBAAoB,UACpBC,gBAAiB,UACjBC,iBAAkB,UAClBC,kBAAmB,UACnBC,eAAgB,UAChBC,YAAa,UACbC,MAAO,UACPC,MAAO,aAMEC,eAAkBvL,QAAA,CAC7ByI,MAAO,CAAC,CACN+C,MAAO,QACPC,QAAS,QACTC,YAA6B,IAAjB1L,MAAM2L,OAAkB,MAAQ,MAC5CC,YAAa,SACbC,YAAa,MACbC,YAAa,QACbC,aAA8B,IAAjB/L,MAAM2L,OAAkB,QAAU,cAC/CK,gBAAiB,cACjBC,QAAS,OACTC,aAAc,cACdC,cAAe,IACfC,UAAW,aACXC,OAAQ,OACRC,MAAO,OACPC,cAAe,SACfC,UAAW,CACT,SAAU,CACRT,YAAa,QACbF,YAAa,MACbH,YAA+B,IAAnB1L,MAAM2I,SAAoB,MAAQ,MAC9CqD,iBAAoC,IAAnBhM,MAAM2I,SAAoB,UAAY,cACvD8D,UAAW,WAIjBC,SAAU,CAAC,CACTT,QAAS,OACTU,OAAQ,wBACRT,aAAc,cACdC,cAAe,IACfM,UAAW,OACXD,UAAW,CACT,eAAgB,CACdP,QAAS,OACTU,QAA2B,IAAnB3M,MAAM2I,SAAoB,wBAA0B,oBAC5DuD,aAAc,cACdO,UAAW,WAIjBG,aAAc,CAAC,CACbnB,QAAS,cACTY,OAAQ,cACRQ,aAAc,MACdL,UAAW,CACT,SAAU,CACRhB,MAAO,YAIbsB,qBAAsB,CAAC,CACrBrB,QAAS,cACTY,OAAQ,cACRG,UAAW,CACT,SAAU,CACRhB,MAAO,YAIbuB,mBAAoB,CAAC,CACnBC,SAAU,UACVC,WAAY,WAEdC,UAAW,CAAC,CACV1B,OAAwB,IAAjBxL,MAAM2L,OApEE,UAoE6B,gBAE9CwB,iBAAkB,CAAC,CACjBC,YAA6B,IAAjBpN,MAAM2L,OAAkB,oBAA4B,OAChE0B,YAAa,UAIJC,wBAA0B,CAAEC,YAAa,MAAOC,UAAW,MAAOlB,MAAO,GAAID,OAAQ,GAAIW,SAAU,WACnGS,uBAAyB,CAAEF,YAAa,MAAOC,UAAW,MAAOlB,MAAO,GAAID,OAAQ,IACpFqB,kBAAoB,CAC/BjC,QAAS,eAGEkC,oBAAuB,CAClClC,QAAS,QACTmC,aAAc,WACdZ,SAAU,SACVC,WAAY,UAGDY,wBAA2B,CACvCC,SAAU,YAIEC,uBAAyB,CAAEzB,MAAO,OCyB/C,0BArIuB,KAhBvB,aAiBE,MAAM0B,aAAc,QAAAC,QAAkB,MAChC3O,WAAaM,iBAEb,QAAS,UAAW,SAAcwJ,uBAClC,YAAiBvB,iBAIvB,QAAAqG,YACE,MACO/F,YACAC,cAC8B,IAA9B9I,WAAW4B,gBACXqI,QAAQ4E,OAAS,QACY,IAA7B7O,WAAW2B,gBACVsI,QAAQ6E,MAAKC,SAhCzB,IAAAC,IAgCmC,OAAAD,OAAO7E,OAAQ,OAAA8E,IAAAhP,WAAW2B,oBAAX,EAAAqN,IAA0B9J,GAAG,KACvElF,WAAW0C,cAAS,EACtB,GAEA,CAACuH,QAASpB,UAAWC,QAAS9I,WAAW2B,gBAE7C,MAAMsN,iBAA2C,IAA7BjP,WAAW2B,eAA+BsI,QAAQ6E,MAAKC,SAtC7E,IAAAC,IAsCuF,OAAAD,OAAO7E,OAAQ,OAAA8E,IAAAhP,WAAW2B,oBAAX,EAAAqN,IAA0B9J,GAAG,IAAG,MAAQ,KAAK,UAAAlF,WAAW2B,oBAAX,KAA0BuN,SAIrKC,oBAAuBzO,QAEzB,mBAAC,OAAI0O,MAAOhB,kBACR,6BAAC,MAAI,eAAA1N,WAAA,EAAAA,MAAOuO,gBAOdI,kBAAoB,CAACC,MAAwCP,OAAwCQ,SACzG,IAAIC,YAEFA,iBADa,IAAXT,SAAwC,IAAhBA,OAAO7E,SACnB,EAEA,CAAC,CACbhF,GAAI6J,OAAO7E,IAAIzH,WACfyM,KAAMH,OAAOpG,KAAK6B,WAClBiF,WAAYtL,aAIhBnE,WAAW0C,SAAS8M,YAAY,EAI5BE,eAAkBX,SAEpB,oBAAC,OAAIK,MAAOhB,kBACT,UAAApO,WAAWyB,iBAAmBsN,QAAUA,OAAOpG,OAC9C,mBAACgH,UAAA,GACCP,MAAOpB,wBACP4B,WAAY,CACVC,IAAKd,OAAOpG,KAAK4B,SACjByC,MAAO,GACPD,OAAQ,MAIbgC,QAAUA,OAAO5E,OAChB,mBAAC,QAAM,SAAA4E,OAAO5E,UAOhB2F,cAAiB7F,WACrB,MAAM8E,OAAS9E,SAAS,GACxB,OACE,oBAAC,OAAI/E,GAAG,WAAWkK,MAAOf,oBACvB,UAAArO,WAAWyB,iBAAmBsN,QAAUA,OAAOpG,MAAQoG,OAAOpG,KAAK4B,WAClE,mBAACoF,UAAA,GACCP,MAAOjB,uBACPyB,WAAY,CACVC,IAAKd,OAAOpG,KAAK4B,SACjByC,MAAO,GACPD,OAAQ,MAIbgC,QAAUA,OAAO5E,OAEd,mBAAC,QAAKiF,MAAOb,wBAA0B,SAAAQ,OAAO5E,SAGpD,EAKJ,OAAItB,WACK,mBAAC,OAAK,SAAA7I,WAAWa,QAAQkC,UAAUC,UAAU,gBAChD8F,SACG,mBAAC,OAAK,SAAA9I,WAAWa,QAAQkC,UAAUC,UAAU,6BAGlD,yCACG,SAAAiH,UACC,oBAAC8F,MAAA,EAAK,CAACC,YAAU,EAAC/C,cAAc,SAASgD,MAAI,EAC3C,8BAACF,MAAA,QAAWG,KAAM,EAAGd,MAAOX,uBAC1B,6BAAC0B,SAAA,GACClB,YACAmB,aAAc1B,YACdS,oBACAW,cACAJ,eACAhN,SAAU2M,kBACVgB,YAAa,oBAAArQ,WAAW2B,oBAAX,KAA0BuD,IAA1B,GAAgC,GAC7C+E,QACAqG,OAAUrE,eACVsE,MAAS9F,cACTpB,SAAUrJ,WAAWkB,eAGmC,SAA3DlB,WAAWa,QAAQE,WAAWyP,qBAAqB9O,MAClD,mBAACqO,MAAA,QAAWG,MAAI,EACd,6BAAC,4BAAgB,UAO/B,E,0RC3IF,MAiBA,uBAjBoB,KAElB,MAAMO,kBAAmB,UAAY,CACnCC,SAAU,GACV3D,OAAQ,GACRC,MAAO,GACP2D,OAAQ,QAGV,OACM,oBAACZ,MAAA,EAAK,CAACa,OAAQ,CAAEC,YAAa,GAAKb,YAAU,EACzC,8BAACc,SAAA,GAAQ,CAAC9H,SAAS,OAAO+H,UAAWN,oBACrC,mBAACO,UAAA,EAAS,CAAC5Q,MAAM,YAAYgP,MAAO,CAAEpC,MAAO,YACjD,ECZFiE,YAAc,IAAI,iBAAAC,YAAY,CAClCC,WAAY,IAAI,iBAAAC,WAChBC,eAAgB,CACdC,QAAS,CACPC,gBAAgB,EAChBC,sBAAsB,MAuB5B,6BAf2B9Q,QACzB,MAAM+Q,kBAAoB,IAAIjR,kBAAkBE,OAEhD,OACE,mBAAC,iBAAAgR,oBAAmB,CAACC,OAAQV,YAAaW,gBAAgB,EACxD,6BAAC7R,mBAAkB,CAACC,WAAYyR,kBAC9B,SAAAA,kBAAkBlQ,UAChB,mBAAC,uBAAW,KACZ,mBAAC,0BAAc,OAGrB,GCpBJ,E,6EAAA,QAAgB,EAAW,CAAEsQ,iBAAiB,IAEvC,MAAM,8BAUZpR,cAkCA,KAAAiC,SAAYoP,WACVnR,KAAKoR,eAAiBD,SACtBnR,KAAKqR,sBAAsB,CAlC7B,CAUOC,KAAMpR,QAA8CqR,oBAAiCC,MAAsCC,WAEhIzR,KAAKqR,qBAAuBE,oBAC5BvR,KAAK0R,OAAQ,SAAAC,YAAWF,WAExBzR,KAAK4R,UAAY,CACf1R,QACAD,WAAY4R,KAAKC,SACjB/P,SAAU/B,KAAK+B,SAEnB,CAMOgQ,WAAY7R,SACjBF,KAAK4R,UAAU1R,QAAUA,QAEzBF,KAAK0R,MAAMM,QAAO,QAAA5N,eAAc,6BAAmBpE,KAAK4R,WAC1D,CAWOK,aACL,MAAO,CACN5R,YAAaL,KAAKoR,eAErB,CAMOc,UAELlS,KAAK0R,MAAMS,SACb,E,uFC/EM,MCqBMC,gBAAkB,KAC3B,IAAIX,UACAY,cAEJ,OAAO,WACL,MAAOC,KAAMC,aAAc,wCAAAC,WAuH3B,OAtHKf,YACHA,UAAYrL,SAAShC,cAAc,OACnCiO,cAAgB,IAAI,OAClB,8BACA,CACElQ,iBAAkB,OAClBb,WAAY,OACZJ,qBAAsB,OACtBb,YAAa,OACbwP,qBAAsB,OACtB/O,gBAAiB,OACjB4E,gBAAiB,QAEnB+L,WAGFY,cAAc3O,SAAS+O,aAAa,CAClC,CACEC,YAAa,UACbC,WAAY,UACZ7J,mBAAoB,YACpBC,qBAAsB,WACtBC,sBAAuB,cACvBvE,uBAAwB,GACxBG,uBAAwB,MAI5ByN,cAAcnS,QAAQ0S,YAAYvS,YAAYK,SAAW,CACvDC,UAAU,EACVE,UAAU,EACVgS,SAAS,GAGXR,cAAcnS,QAAQqF,OAAO6B,eAAe0L,WAC1C,CAAChE,WAAoBvK,GAAY+E,UAEtB,IAAIyJ,QADM,eAAfjE,WACkBkE,SAClBC,YACE,IACED,QAAQ,CACN/K,iBAAkB,UAClBxE,SAAU,kHAMd,KAIa,CAACyP,SAAUC,UAC5BF,YAAW,IAAME,OAAO,IAAIC,MAAM,aAAa,IAAI,KAKzDf,cAAcnS,QAAQqF,OAAOC,wBAAwBsN,WACnD,CAAChE,WAAoBxF,QAAkB+J,cAC9B,IAAIN,SAASC,UAClBA,QAAQ,CACNvN,SAAU,CACR,CACE6N,UAAW,IACXC,SAAU,aACVC,QAAS,UACTC,YD3FI,w72CC6FN,CACEH,UAAW,IACXC,SAAU,eACVC,QAAS,SACTC,YDpGI,iwKCuGRC,SAAU,IACV,MAKRrB,cAAcsB,gBAAgBb,WAAU,KA9GhD,UA+GU,MAAM,qBAAsB,cAC1B,cAAAT,cAAcuB,SAAQ3B,iBAAtB,gBAAwC,CAAC,EAC3CM,WAAW,CACTlS,YAAa,MAAAA,iBAAA,EAAAA,YAAc,GAC3Ba,qBAAsB,MAAAA,0BAAA,EAAAA,qBAAuB,IAC7C,IAGJmR,cAAcnS,QAAQ2T,gBAAgB,CACpCxT,YAAaiS,KAAKjS,YAClB8B,iBAAkBmQ,KAAKnQ,iBACvBb,WAAYgR,KAAKhR,aAGnB+Q,cAAcyB,eAGZzB,gBACFA,cAAcnS,QAAQ0S,YAAYzQ,iBAAiB4R,UACjDzB,KAAKnQ,kBAEPkQ,cAAcnS,QAAQ0S,YAAYtR,WAAWyS,UAAUzB,KAAKhR,YAC5D+Q,cAAcnS,QAAQ0S,YAAY1R,qBAAqB6S,UACrDzB,KAAKpR,sBAEPmR,cAAcnS,QAAQ0S,YAAYvS,YAAY0T,UAAUzB,KAAKjS,aAC7DgS,cAAcnS,QAAQ0S,YAAY/C,qBAAqBkE,UACrDzB,KAAKzC,qBAAuB,OAAS,SAEvCwC,cAAcnS,QAAQ0S,YAAY9R,gBAAgBiT,UAChDzB,KAAKxR,gBAAkB,OAAS,SAElCuR,cAAc2B,qBAGTvC,SACT,CAAC,E,ICnJL,oC,8qBAEA,8BACEjJ,MAAO,+BACPyL,WAAY,CAACC,QACX,MAAMzC,UAAYrL,SAAShC,cAAc,OACzCqN,UAAUhD,MAAMuB,OAAS,MACzByB,UAAUhD,MAAM0F,QAAU,MAC1B1C,UAAUhD,MAAM2F,SAAW,QAC3B3C,UAAUhD,MAAM/B,OAAS,aACzB,MAAM2H,YAAcH,QAMpB,MAL0B,iBAAfG,YACT5C,UAAU6C,UAAYD,YAEtB5C,UAAUnN,YAAY+P,aAEjB5C,SAAS,GAElBrR,WAAY,CAEVmU,OAAQ,cAGVC,SAAU,CACRC,WAAY,CACVlG,KAAM,WACNqF,QAAS,UACTc,MAAO,CACLC,SAAU,OACVC,aAAc,CACZC,QAAS,WAIfC,UAAW,CACTvG,KAAM,UACNqF,QAAS,UACTc,MAAO,CACLC,SAAU,OACVC,aAAc,CACZC,QAAS,UAIf1S,iBAAkB,CAChBoM,KAAM,qBACNqF,QAAS,QAEXtS,WAAY,CACViN,KAAM,cACNqF,QAAS,QAEX/D,qBAAsB,CACpBtB,KAAM,mBACNqF,QAAS,WAEX9S,gBAAiB,CACfyN,KAAM,oBACNqF,QAAS,YAGbtB,KAAM,CACJwC,WAAW,EACXL,YAAY,IAGHM,QAAW,CACtB/C,OAAQI,kBACRE,KAAM,CACJnQ,iBAAkB,gBAClBb,gBAAY,EACZuO,sBAAsB,EACtB/O,iBAAiB,GAEnBV,WAAY,CACV4U,SAAU,CACRC,UAAU,KAIHC,WAAc,CACzBlD,OAAQI,kBACRE,KAAM,CACJnQ,iBAAkB,gBAClBb,WAAY,+BACZuO,sBAAsB,EACtB/O,iBAAiB,IAGRqU,SAAY,CACvBnD,OAAQI,kBACRE,KAAM,CACJjS,YAAa,CACXkO,KAAM,eACNhK,GAAI,IACJuK,WAAY,WAEd3M,iBAAkB,gBAClBb,gBAAY,EACZuO,sBAAsB,EACtB/O,iBAAiB,IAGRsU,SAAY,CACvBpD,OAAQI,kBACRE,KAAM,CACJnQ,iBAAkB,gBAClBb,WAAY,0EACZuO,sBAAsB,EACtB/O,iBAAiB,IAGrBiU,QAAQ3U,WAAa,gCAChB2U,QAAQ3U,YADQ,CAEnBiV,KAAM,gCACD,UAAAN,QAAQ3U,iBAAR,KAAoBiV,MADnB,CAEJC,OAAQ,gBACNC,eAAgB,kRACb,oBAAAR,QAAQ3U,iBAAR,KAAoBiV,WAApB,KAA0BC,YAInCJ,WAAW9U,WAAa,gCACnB8U,WAAW9U,YADQ,CAEtBiV,KAAM,gCACD,UAAAH,WAAW9U,iBAAX,KAAuBiV,MADtB,CAEJC,OAAQ,gBACNC,eAAgB,kOACb,oBAAAL,WAAW9U,iBAAX,KAAuBiV,WAAvB,KAA6BC,YAItCH,SAAS/U,WAAa,gCACjB+U,SAAS/U,YADQ,CAEpBiV,KAAM,gCACD,UAAAF,SAAS/U,iBAAT,KAAqBiV,MADpB,CAEJC,OAAQ,gBACNC,eAAgB,mTACb,oBAAAJ,SAAS/U,iBAAT,KAAqBiV,WAArB,KAA2BC,YAIpCF,SAAShV,WAAa,gCACjBgV,SAAShV,YADQ,CAEpBiV,KAAM,gCACD,UAAAD,SAAShV,iBAAT,KAAqBiV,MADpB,CAEJC,OAAQ,gBACNC,eAAgB,6QACb,oBAAAH,SAAShV,iBAAT,KAAqBiV,WAArB,KAA2BC,W","sources":["webpack:///./LookupDropdown/services/PcfContext.tsx","webpack:///./LookupDropdown/services/PcfContextService.ts","webpack:///./LookupDropdown/hooks/useLookupView.ts","webpack:///./LookupDropdown/components/OpenRecordButton.tsx","webpack:///./LookupDropdown/hooks/useMetadata.ts","webpack:///./LookupDropdown/hooks/useRecords.ts","webpack:///./LookupDropdown/styles/DropdownStyles.ts","webpack:///./LookupDropdown/components/LookupDropdown.tsx","webpack:///./LookupDropdown/components/MaskedInput.tsx","webpack:///./LookupDropdown/components/LookupDropdownApp.tsx","webpack:///./LookupDropdown/index.ts","webpack:///./stories/mock/EntityImages.ts","webpack:///./stories/LookupDropdown.renderGenerator.ts","webpack:///./stories/LookupDropdown.stories.ts"],"sourcesContent":["/* eslint-disable no-use-before-define */\nimport { createContext, ReactNode, useContext } from 'react'\nimport { PcfContextService } from './PcfContextService'\n\ninterface PcfContextProviderProps {\n   pcfcontext:PcfContextService,\n   children: ReactNode\n};\n\nexport const PcfContextProvider = ({ pcfcontext, children }: PcfContextProviderProps) => {\n  return (\n     <PcfContext.Provider value={pcfcontext}>\n       {children}\n     </PcfContext.Provider>\n  )\n}\n\nconst PcfContext = createContext<PcfContextService>(undefined!)\n\nexport const usePcfContext = () => {\n  return useContext(PcfContext)\n}\n","/* eslint-disable no-mixed-spaces-and-tabs */\n/* eslint-disable no-tabs */\n/* eslint-disable no-undef */\n\nimport { IInputs } from '../generated/ManifestTypes'\n\nexport interface IPcfContextServiceProps{\n  context: ComponentFramework.Context<IInputs>;\n  instanceid: number;\n  onChange: (selectedOption?: ComponentFramework.LookupValue[] | undefined) => void;\n}\n\nexport class PcfContextService {\n  instanceid:number;\n  context: ComponentFramework.Context<IInputs>;\n  viewid:string;\n  isReadOnly:boolean;\n  isMasked:boolean;\n  showRecordImage:boolean;\n  selectedValue:ComponentFramework.LookupValue | undefined;\n  dependentValue:ComponentFramework.LookupValue | undefined;\n  dependentEntityName:string;\n  filterRelationshipName:string;\n  customText: string | null | undefined;\n  onChange: (selectedOption?: ComponentFramework.LookupValue[] | undefined) => void;\n\n  constructor (props?:IPcfContextServiceProps) {\n    if (props) {\n      this.instanceid = props.instanceid\n      this.context = props.context\n      this.viewid = props.context.parameters.lookupfield.getViewId()\n      this.isReadOnly = props.context.mode.isControlDisabled || !props.context.parameters.lookupfield.security?.editable\n      this.isMasked = !props.context.parameters.lookupfield.security?.readable\n      this.showRecordImage = props.context.parameters.showRecordImage.raw === 'true'\n      this.selectedValue = props.context.parameters.lookupfield.raw[0] ?? undefined\n      this.dependentValue = props.context.parameters.dependentlookupfield?.raw !== null\n        ? props.context.parameters.dependentlookupfield?.raw[0]\n        : undefined\n      this.dependentEntityName = (props.context.parameters.lookupfield as any).dependentAttributeType ?? ''\n      this.filterRelationshipName = (props.context.parameters.lookupfield as any).filterRelationshipName ?? ''\n      if (this.context.parameters.customtext.raw)\n      {\n        this.customText = this.context.parameters.customtext.raw.indexOf(\"##\") > -1 ? this.context.parameters.customtext.raw.split(\"__\").find(langcustomtext => langcustomtext.split(\"##\")[0] === this.context.userSettings.languageId.toString())?.split(\"##\")[1] : this.context.parameters.customtext.raw;\n      }\n      \n      this.onChange = props.onChange\n    }\n  }\n\n  // Returns all strings between curly braces in custom text\n  CustomTextAttributes ():string[] {\n    // eslint-disable-next-line no-useless-escape\n    return this.context.parameters.customtext.raw?.match(/[^{\\}]+(?=})/g) ?? []\n  }\n\n  SelectText ():string {\n    return `--${this.context.parameters.customselecttext.raw ?? this.context.resources.getString(\"Select\")}--`\n  }\n\n  replaceAll (string:string, search:string, replace:string) {\n    return string.split(search).join(replace)\n  }\n\n  getRecordText (record:ComponentFramework.WebApi.Entity, primaryname:string):string {\n    // Default = record primaryname\n    if (!this.customText) {\n      return record[`${primaryname}`]\n    } else {\n      // Custom text\n      let customtext = this.customText;\n        this.CustomTextAttributes().forEach(attribute => {\n          // check if there is a formated value for the attribute (ex. Choice, Date, Lookup etc)\n          const formatedValue = record[`${attribute}@OData.Community.Display.V1.FormattedValue`] ??\n                                record[`_${attribute}_value@OData.Community.Display.V1.FormattedValue`] ??\n                                record[`${attribute}`]\n          customtext = this.replaceAll(customtext!, `{${attribute}}`, formatedValue ?? '')\n        })\n  \n        return customtext\n    }\n  }\n\n  // Get the list of fields to fetch\n  getAttributes (primaryid:string, primaryname:string, primaryimage:string):string[] {\n    const attributes:string[] = [primaryid, primaryname] // primaryid and primaryname is always fetched\n\n    // add custom text attributes if needed\n    this.CustomTextAttributes().forEach(attribute => {\n      if (!attributes.includes(attribute)) {\n        attributes.push(attribute)\n      }\n    })\n\n    // add primaryimage if needed\n    if (this.showRecordImage) {\n      attributes.push(primaryimage)\n    }\n    return attributes\n  }\n\n  async getLookupRecords (entityname:string, primaryid:string, primaryname:string, primaryimage:string, fetchxml:string, metadata:ComponentFramework.PropertyHelper.EntityMetadata) : Promise<ComponentFramework.WebApi.Entity[]> {\n    const parser = new DOMParser()\n    const fetchxmldoc = parser.parseFromString(fetchxml, 'text/xml')\n\n    // Manipulate fetch xml to include only the fields we need\n    const entityelement = fetchxmldoc.getElementsByTagName('entity')[0]\n\n    // remove existing attributes from view fetchxml\n    fetchxmldoc.querySelectorAll('attribute').forEach(el => el.remove())\n    fetchxmldoc.querySelectorAll('link-entity[alias=\"dependent\"]').forEach(el => el.remove())\n\n    // add attributes to fetchxml\n    this.getAttributes(primaryid, primaryname, primaryimage).forEach(attribute => {\n      const customattribute = fetchxmldoc.createElement('attribute')\n      customattribute.setAttribute('name', attribute)\n      entityelement.appendChild(customattribute)\n    })\n\n    // set dependent filter if needed\n    if (this.filterRelationshipName !== '' &&\n        this.dependentEntityName !== '' &&\n        this.dependentValue !== undefined &&\n        this.dependentValue?.id !== '') {\n      const manytoonerelationship = metadata.ManyToOneRelationships?.getByName(this.filterRelationshipName)\n      const onetomanyrelationship = metadata.OneToManyRelationships?.getByName(this.filterRelationshipName)\n      const manytomanyrelationship = metadata.ManyToManyRelationships?.getByName(this.filterRelationshipName)\n\n      const linkentity = manytoonerelationship\n        ? this.getManyToOneLinkEntity(manytoonerelationship)\n        : (onetomanyrelationship\n            ? this.getOneToManyLinkEntity(onetomanyrelationship, entityname)\n            : this.getManyToManyLinkEntity(manytomanyrelationship, entityname))\n\n      entityelement.appendChild(linkentity)\n    }\n\n    const fetchxmlstring = new XMLSerializer().serializeToString(fetchxmldoc)\n    const result = await this.context.webAPI\n      .retrieveMultipleRecords(entityname, `?fetchXml=${fetchxmlstring}`)\n\n    if (result.entities)\n    {\n      if (this.context.parameters.sortByTextValue.raw === 'true')\n      {\n        return result.entities?.sort((a, b) => {\n          const aText = this.getRecordText(a, primaryname);\n          const bText = this.getRecordText(b, primaryname);\n          return aText.localeCompare(bText);\n        });\n      }\n      return result.entities;\n    }\n    return [];\n  }\n\n  private getManyToOneLinkEntity (manytoonerelationship:any) :HTMLElement {\n    const from = `${this.dependentEntityName}id`\n    const to = manytoonerelationship.ReferencingAttribute\n\n    const linkentity = document.createElement('link-entity')\n    linkentity.setAttribute('name', this.dependentEntityName)\n    linkentity.setAttribute('from', from)\n    linkentity.setAttribute('to', to)\n    linkentity.setAttribute('alias', 'dependent')\n\n    const filter = document.createElement('filter')\n    filter.setAttribute('type', 'and')\n\n    const condition = document.createElement('condition')\n    condition.setAttribute('attribute', `${this.dependentEntityName}id`)\n    condition.setAttribute('operator', 'eq')\n    condition.setAttribute('uitype', this.dependentEntityName)\n    condition.setAttribute('value', this.dependentValue?.id ?? '')\n\n    filter.appendChild(condition)\n    linkentity.appendChild(filter)\n\n    return linkentity\n  }\n\n  private getOneToManyLinkEntity (onetomanyrelationship:any, baseentityname:string) :HTMLElement {\n    const from = onetomanyrelationship.ReferencingAttribute\n    const to = `${baseentityname}id`\n\n    const linkentity = document.createElement('link-entity')\n    linkentity.setAttribute('name', this.dependentEntityName)\n    linkentity.setAttribute('from', from)\n    linkentity.setAttribute('to', to)\n    linkentity.setAttribute('alias', 'dependent')\n\n    const filter = document.createElement('filter')\n    filter.setAttribute('type', 'and')\n\n    const condition = document.createElement('condition')\n    condition.setAttribute('attribute', `${this.dependentEntityName}id`)\n    condition.setAttribute('operator', 'eq')\n    condition.setAttribute('uitype', this.dependentEntityName)\n    condition.setAttribute('value', this.dependentValue?.id ?? '')\n\n    filter.appendChild(condition)\n    linkentity.appendChild(filter)\n\n    return linkentity\n  }\n\n  private getManyToManyLinkEntity (manytomanyrelationship:any, baseentityname:string) :HTMLElement {\n    const intersectentity = manytomanyrelationship.IntersectEntityName\n    const intersectFromTo = manytomanyrelationship.Entity1LogicalName === baseentityname\n      ? manytomanyrelationship.Entity1IntersectAttribute\n      : manytomanyrelationship.Entity2IntersectAttribute\n\n    const dependententity = manytomanyrelationship.Entity1LogicalName === baseentityname\n      ? manytomanyrelationship.Entity2LogicalName\n      : manytomanyrelationship.Entity1LogicalName\n\n    const dependententityFromTo = manytomanyrelationship.Entity1LogicalName === baseentityname\n      ? manytomanyrelationship.Entity2IntersectAttribute\n      : manytomanyrelationship.Entity1IntersectAttribute\n\n    const linkentity1 = document.createElement('link-entity')\n    linkentity1.setAttribute('name', intersectentity)\n    linkentity1.setAttribute('from', intersectFromTo)\n    linkentity1.setAttribute('to', intersectFromTo)\n\n    const linkentity2 = document.createElement('link-entity')\n    linkentity2.setAttribute('name', dependententity)\n    linkentity2.setAttribute('from', dependententityFromTo)\n    linkentity2.setAttribute('to', dependententityFromTo)\n    linkentity2.setAttribute('alias', 'dependent')\n\n    const filter = document.createElement('filter')\n    filter.setAttribute('type', 'and')\n\n    const condition = document.createElement('condition')\n    condition.setAttribute('attribute', dependententityFromTo)\n    condition.setAttribute('operator', 'eq')\n    condition.setAttribute('uitype', dependententity)\n    condition.setAttribute('value', this.dependentValue?.id ?? '')\n\n    filter.appendChild(condition)\n    linkentity2.appendChild(filter)\n    linkentity1.appendChild(linkentity2)\n    return linkentity1\n  }\n\n  async getLookupView () : Promise<ComponentFramework.WebApi.Entity> {\n    return await this.context.webAPI\n      .retrieveRecord('savedquery', this.viewid, '?$select=returnedtypecode,fetchxml')\n  }\n\n  async getEntityMetadata (entityname:string) : Promise<ComponentFramework.PropertyHelper.EntityMetadata> {\n    // console.log(this.instanceid + ' | ' + `${entityname} : Getting metadata`)\n    return this.context.utils.getEntityMetadata(entityname)\n  }\n\n  async openRecord (entityname:string):Promise<ComponentFramework.NavigationApi.OpenFormSuccessResponse> {\n    return this.context.navigation.openForm(\n      {\n        entityName: entityname,\n        entityId: this.selectedValue?.id ?? ''\n      }\n    )\n  }\n}\n","\nimport { useQuery } from '@tanstack/react-query'\nimport { usePcfContext } from '../services/PcfContext'\n\nexport const useLookupView = () => {\n  const pcfcontext = usePcfContext()\n\n  const { data, isLoading, isError } =\n    // eslint-disable-next-line no-undef\n    useQuery<ComponentFramework.WebApi.Entity, Error>(\n      ['savedquery', pcfcontext.instanceid],\n      () => pcfcontext.getLookupView(),\n      {\n        staleTime: Infinity\n      }\n    )\n\n  return {\n    fetchxml: data?.fetchxml,\n    entityname: data?.returnedtypecode,\n    isLoading,\n    isError\n  }\n}\n","/* eslint-disable no-use-before-define */\nimport { IconButton } from '@fluentui/react/lib/Button'\nimport { IIconProps } from '@fluentui/react/lib/Icon'\nimport { useLookupView } from '../hooks/useLookupView'\nimport { usePcfContext } from '../services/PcfContext'\n\nconst openbuttonicon: IIconProps = { iconName: 'OpenInNewWindow' }\n// eslint-disable-next-line no-undef\nconst OpenRecordButton = ():JSX.Element => {\n  const pcfcontext = usePcfContext()\n  const { entityname } = useLookupView()\n\n  return <IconButton\n            iconProps={openbuttonicon}\n            title=\"Open record\"\n            ariaLabel=\"Open record\"\n            disabled={pcfcontext.selectedValue === undefined}\n            onClick={() => {\n              pcfcontext.openRecord(entityname)\n            }}\n          />\n}\nexport default OpenRecordButton\n","/* eslint-disable no-undef */\n\nimport { useQuery } from '@tanstack/react-query'\nimport { usePcfContext } from '../services/PcfContext'\n\nexport const useMetadata = (entityname:string) => {\n  const pcfcontext = usePcfContext()\n\n  const { data, isLoading, isError } =\n    useQuery<ComponentFramework.PropertyHelper.EntityMetadata, Error>(\n      ['metadata', entityname, pcfcontext.instanceid],\n      () => pcfcontext.getEntityMetadata(entityname),\n      {\n        enabled: entityname !== null && entityname !== undefined && entityname !== '',\n        staleTime: Infinity\n      }\n    )\n\n  return {\n    metadata: data,\n    primaryid: data?.PrimaryIdAttribute,\n    primaryname: data?.PrimaryNameAttribute,\n    primaryimage: data?.PrimaryImageAttribute,\n    manytoonerelationships: data?.ManyToOneRelationships,\n    onetomanyrelationships: data?.OneToManyRelationships,\n    isLoading,\n    isError\n  }\n}\n","/* eslint-disable no-undef */\nimport { IDropdownOption } from '@fluentui/react/lib/Dropdown'\nimport { useQuery } from '@tanstack/react-query'\n\nimport { usePcfContext } from '../services/PcfContext'\nimport { useLookupView } from './useLookupView'\nimport { useMetadata } from './useMetadata'\n\nexport const useRecords = () => {\n  const pcfcontext = usePcfContext()\n  const { entityname, fetchxml } = useLookupView()\n  const { primaryid, primaryname, primaryimage, metadata } = useMetadata(entityname)\n\n  const { data, isLoading, isError } =\n    useQuery<ComponentFramework.WebApi.Entity[], Error>(\n      ['lookuprecords', pcfcontext.instanceid, pcfcontext.dependentValue?.id],\n      () => pcfcontext.getLookupRecords(entityname, primaryid, primaryname, primaryimage, fetchxml, metadata!),\n      {\n        enabled: !!entityname && !!primaryid && !!fetchxml,\n        staleTime: Infinity\n      }\n    )\n\n  return { records: data, isLoading, isError }\n}\n\nexport const useRecordsAsOptions = () => {\n  const pcfcontext = usePcfContext()\n  const { records, isLoading, isError } = useRecords()\n  const { entityname } = useLookupView()\n  const { primaryid, primaryname, primaryimage } = useMetadata(entityname)\n\n  const options:IDropdownOption[] = records\n    ? [{ key: -1, text: pcfcontext.SelectText() }].concat(records.map(e => {\n        const imagesrc = e?.[primaryimage] == null\n          ? undefined\n          : `data:image/jpeg;base64,${e?.[primaryimage]}`\n        return {\n          key: e[`${primaryid}`],\n          text: pcfcontext.getRecordText(e, primaryname),\n          data: {\n            imagesrc: imagesrc,\n            recordname: e[`${primaryname}`]\n          }\n        }\n      }))\n    : [{ key: -1, text: pcfcontext.SelectText() }]\n\n  return { options, isLoading, isError }\n}\n","import { IStyle, createTheme } from '@fluentui/react/lib/Styling'\nimport { IDropdownStyles, IDropdownStyleProps } from '@fluentui/react/lib/Dropdown'\n\nexport const dropdownTheme = createTheme({\n  palette: {\n    themePrimary: '#a9a9a9',\n    themeLighterAlt: '#fcfcfc',\n    themeLighter: '#f1f1f1',\n    themeLight: '#e5e5e5',\n    themeTertiary: '#cbcbcb',\n    themeSecondary: '#b3b3b3',\n    themeDarkAlt: '#979797',\n    themeDark: '#808080',\n    themeDarker: '#5e5e5e',\n    neutralLighterAlt: '#faf9f8',\n    neutralLighter: '#f3f2f1',\n    neutralLight: '#edebe9',\n    neutralQuaternaryAlt: '#e1dfdd',\n    neutralQuaternary: '#d0d0d0',\n    neutralTertiaryAlt: '#c8c6c4',\n    neutralTertiary: '#595959',\n    neutralSecondary: '#373737',\n    neutralPrimaryAlt: '#2f2f2f',\n    neutralPrimary: '#000000',\n    neutralDark: '#151515',\n    black: '#0b0b0b',\n    white: '#ffffff'\n  }\n})\n\nconst colorFocus = '#a9a9a9'\n\nexport const dropdownStyles = (props: IDropdownStyleProps):Partial<IDropdownStyles> => ({\n  title: [{\n    color: 'black',\n    display: 'block',\n    fontWeight: props.isOpen === true ? '400' : '600',\n    fontStretch: 'normal',\n    borderWidth: '1px',\n    borderStyle: 'solid',\n    borderColor: props.isOpen === true ? 'black' : 'transparent',\n    backgroundColor: 'transparent',\n    outline: 'none',\n    outlineColor: 'transparent',\n    outlineOffset: '0',\n    boxSizing: 'border-box',\n    height: '33px',\n    width: '100%',\n    verticalAlign: 'middle',\n    selectors: {\n      ':hover': {\n        borderColor: 'black',\n        borderWidth: '1px',\n        fontWeight: props.disabled === true ? '600' : '400',\n        backgroundColor: props.disabled === true ? '#E2E2E2' : 'transparent',\n        boxShadow: 'none'\n      }\n    }\n  }],\n  dropdown: [{\n    outline: 'none',\n    border: '1px solid transparent',\n    outlineColor: 'transparent',\n    outlineOffset: '0',\n    boxShadow: 'none',\n    selectors: {\n      ':focus:after': {\n        outline: 'none',\n        border: props.disabled === true ? '1px solid transparent' : `1px solid ${colorFocus}`,\n        outlineColor: 'transparent',\n        boxShadow: 'none'\n      }\n    }\n  }],\n  dropdownItem: [{\n    display: 'inline-flex',\n    height: 'fit-content',\n    marginBottom: '2px',\n    selectors: {\n      ':hover': {\n        color: 'black'\n      }\n    }\n  }],\n  dropdownItemSelected: [{\n    display: 'inline-flex',\n    height: 'fit-content',\n    selectors: {\n      ':hover': {\n        color: 'black'\n      }\n    }\n  }],\n  dropdownOptionText: [{ \n    overflow: 'visible', \n    whiteSpace: 'normal' \n  }],\n  caretDown: [{\n    color: props.isOpen === true ? colorFocus : 'transparent'\n  }],\n  caretDownWrapper: [{\n    borderLeft: props.isOpen === true ? `1px solid ${colorFocus}` : 'none',\n    paddingLeft: '7px'\n  }]\n})\n\nexport const dropdownIconOptionStyle = { marginRight: '8px', marginTop: '2px', width: 25, height: 25, overflow: 'inherit' } as React.CSSProperties\nexport const dropdownIcontitleStyle = { marginRight: '8px', marginTop: '3px', width: 25, height: 25 } as React.CSSProperties\nexport const dropdownTextStyle = { \n  display: 'inline-flex' \n} as React.CSSProperties\n\nexport const dropdownTitleStyles  = { \n  display: 'block', \n  textOverflow: 'ellipsis', \n  overflow: 'hidden', \n  whiteSpace: 'nowrap'\n} as React.CSSProperties\n\nexport const dropdownTitleSpanStyles  = { \n position: 'absolute',\n //bottom: '2px'\n} as React.CSSProperties\n\nexport const dropdownStackItemStyle = { width: '90%' } as React.CSSProperties","/* eslint-disable no-use-before-define */\nimport * as React from 'react'\nimport { useRef, useEffect } from 'react'\nimport { Stack } from '@fluentui/react/lib/Stack'\nimport { usePcfContext } from '../services/PcfContext'\nimport OpenRecordButton from './OpenRecordButton'\nimport { Dropdown, IDropdownOption, IDropdown, IDropdownProps } from '@fluentui/react/lib/Dropdown'\nimport { ImageIcon } from '@fluentui/react/lib/Icon'\nimport { useRecordsAsOptions } from '../hooks/useRecords'\nimport { dropdownIconOptionStyle, dropdownIcontitleStyle, dropdownStackItemStyle, dropdownStyles, dropdownTextStyle, dropdownTheme, dropdownTitleSpanStyles, dropdownTitleStyles } from '../styles/DropdownStyles'\nimport { useLookupView } from '../hooks/useLookupView'\nexport interface ILookupDropdownProps{\n  entity: string;\n}\n\n// eslint-disable-next-line no-undef\nconst LookupDropdown = ():JSX.Element => {\n  const dropdownRef = useRef<IDropdown>(null)\n  const pcfcontext = usePcfContext()\n  // Custom Hook based on react-query\n  const { options, isLoading, isError } = useRecordsAsOptions()\n  const { entityname } = useLookupView()\n\n  // Clear the value if the selected value is not in the options\n  // Only Used when a dependent lookup is changed\n  useEffect(\n    () => {\n      if (!isLoading &&\n          !isError &&\n           pcfcontext.dependentValue !== undefined && // Only clear if a dependent value is set\n           options.length > 1 && // IMPORTANT There is always a blank option\n           pcfcontext.selectedValue !== undefined &&\n           !options.some(option => option.key === pcfcontext.selectedValue?.id)) {\n        pcfcontext.onChange(undefined)\n      }\n    }\n    , [options, isLoading, isError, pcfcontext.selectedValue])\n\n  const placeholder = pcfcontext.selectedValue === undefined || options.some(option => option.key === pcfcontext.selectedValue?.id) ? '---' : `--${pcfcontext.selectedValue?.name}--`\n\n  // EVENTS\n  // eslint-disable-next-line no-undef\n  const onRenderPlaceholder = (props: IDropdownProps|undefined): JSX.Element => {\n    return (\n      <div style={dropdownTextStyle}>\n          <em>{props?.placeholder}</em>\n      </div>\n    )\n  }\n\n  // - When value of combobox changes, callback to PCF\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const onDropdownChanged = (event: React.FormEvent<HTMLDivElement>, option?:IDropdownOption<any>|undefined, index? : number | undefined) => {\n    let lookupvalue\n    if (option === undefined || option.key === -1) {\n      lookupvalue = undefined\n    } else {\n      lookupvalue = [{\n        id: option.key.toString(),\n        name: option.data.recordname,\n        entityType: entityname\n      }]\n    }\n\n    pcfcontext.onChange(lookupvalue)\n  }\n\n  // eslint-disable-next-line no-undef\n  const onRenderOption = (option: IDropdownOption | undefined): JSX.Element => {\n    return (\n      <div style={dropdownTextStyle}>\n        {pcfcontext.showRecordImage && option && option.data && (\n          <ImageIcon\n            style={dropdownIconOptionStyle}\n            imageProps={{\n              src: option.data.imagesrc,\n              width: 25,\n              height: 25\n            }}\n          />\n        )}\n        {option && option.text && (\n          <span>{option.text}</span>\n        )}\n      </div>\n    )\n  }\n\n  // eslint-disable-next-line no-undef\n  const onRenderTitle = (options: IDropdownOption[] | undefined): JSX.Element => {\n    const option = options![0]\n    return (\n      <div id='titlediv' style={dropdownTitleStyles}>\n        {pcfcontext.showRecordImage && option && option.data && option.data.imagesrc && (\n          <ImageIcon\n            style={dropdownIcontitleStyle}\n            imageProps={{\n              src: option.data.imagesrc,\n              width: 25,\n              height: 25\n            }}\n          />\n        )}\n        {option && option.text && (\n          \n            <span style={dropdownTitleSpanStyles}>{option.text}</span>\n          \n        )}\n      </div>\n    )\n  }\n\n  // MAIN RENDERING\n  if (isLoading) {\n    return <div>{pcfcontext.context.resources.getString(\"Loading...\")}</div>\n  } if (isError) {\n    return <div>{pcfcontext.context.resources.getString(\"Error fetching data...\")}</div>\n  } else {\n    return (\n      <>\n        {options && (\n          <Stack horizontal verticalAlign=\"center\" wrap>\n            <Stack.Item grow={9} style={dropdownStackItemStyle}>\n              <Dropdown\n                placeholder={placeholder}\n                componentRef={dropdownRef}\n                onRenderPlaceholder={onRenderPlaceholder}\n                onRenderTitle={onRenderTitle}\n                onRenderOption={onRenderOption}\n                onChange={onDropdownChanged}\n                selectedKey={pcfcontext.selectedValue?.id ?? ''}\n                options={options}\n                styles = {dropdownStyles}\n                theme = {dropdownTheme}\n                disabled={pcfcontext.isReadOnly}\n              />\n            </Stack.Item>\n            {pcfcontext.context.parameters.showOpenRecordButton.raw === 'true' && (\n              <Stack.Item grow>\n                <OpenRecordButton/>\n              </Stack.Item>\n            )}\n          </Stack>\n        )}\n      </>\n    )\n  }\n}\n\nexport default LookupDropdown\n","/* eslint-disable no-undef */\n// eslint-disable-next-line no-use-before-define\nimport { mergeStyles } from '@fluentui/react/lib/Styling'\nimport { FontIcon } from '@fluentui/react/lib/Icon'\nimport { Stack } from '@fluentui/react/lib/Stack'\nimport { TextField } from '@fluentui/react/lib/TextField'\n\nconst MaskedInput = (): JSX.Element => {\n  // STYLES\n  const maskedinputclass = mergeStyles({\n    fontSize: 30,\n    height: 30,\n    width: 50,\n    margin: '1px'\n  })\n\n  return (\n        <Stack tokens={{ childrenGap: 2 }} horizontal>\n            <FontIcon iconName=\"Lock\" className={maskedinputclass} />\n            <TextField value=\"*********\" style={{ width: '100%' }}/>\n        </Stack>\n  )\n}\n\nexport default MaskedInput\n","/* eslint-disable no-use-before-define */\nimport { QueryCache, QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { PcfContextProvider } from '../services/PcfContext'\nimport { IPcfContextServiceProps, PcfContextService } from '../services/PcfContextService'\nimport LookupDropdown from './LookupDropdown'\nimport MaskedInput from './MaskedInput'\n\n// declare outside of FC element so it doesnt gets evaluated at each rerenders\nconst queryClient = new QueryClient({\n  queryCache: new QueryCache(), // creates a new querycahe for each instance of the control on a page\n  defaultOptions: {\n    queries: {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false\n      // IMPORTANT otherwise data will be refreshed everytime the focus on the PCF is lost and regained\n      // https://react-query.tanstack.com/guides/window-focus-refetching#_top\n    }\n  }\n})\n\n// eslint-disable-next-line no-undef\nconst LookupDropdownApp = (props:IPcfContextServiceProps): JSX.Element => {\n  const pcfcontextservice = new PcfContextService(props)\n\n  return (\n    <QueryClientProvider client={queryClient} contextSharing={false}>\n      <PcfContextProvider pcfcontext={pcfcontextservice}>\n      { pcfcontextservice.isMasked\n        ? <MaskedInput/>\n        : <LookupDropdown />\n      }\n      </PcfContextProvider>\n    </QueryClientProvider>\n  )\n}\n\nexport default LookupDropdownApp\n","/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable no-useless-constructor */\n/* eslint-disable no-mixed-spaces-and-tabs */\n/* eslint-disable no-tabs */\n/* eslint-disable no-undef */\nimport { IInputs, IOutputs } from './generated/ManifestTypes'\nimport { createRoot, Root } from 'react-dom/client'\nimport LookupDropdownApp from './components/LookupDropdownApp'\nimport { IPcfContextServiceProps } from './services/PcfContextService'\nimport { initializeIcons } from '@fluentui/react/lib/Icons'\nimport { createElement } from 'react'\n\ninitializeIcons(undefined, { disableWarnings: true })\n\nexport class LookupDropdown implements ComponentFramework.StandardControl<IInputs, IOutputs> {\n\tprivate _notifyOutputChanged:() => void;\n\t// private _container: HTMLDivElement;\n\tprivate _selectedValue: ComponentFramework.LookupValue[] | undefined;\n\tprivate _appprops:IPcfContextServiceProps;\n\tprivate _root: Root;\n\n\t/**\n\t * Empty constructor.\n\t */\n\tconstructor () {\n\n\t}\n\n\t/**\n\t * Used to initialize the control instance. Controls can kick off remote server calls and other initialization actions here.\n\t * Data-set values are not initialized here, use updateView.\n\t * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to property names defined in the manifest, as well as utility functions.\n\t * @param notifyOutputChanged A callback method to alert the framework that the control has new outputs ready to be retrieved asynchronously.\n\t * @param state A piece of data that persists in one session for a single user. Can be set at any point in a controls life cycle by calling 'setControlState' in the Mode interface.\n\t * @param container If a control is marked control-type='standard', it will receive an empty div element within which it can render its content.\n\t */\n\tpublic init (context: ComponentFramework.Context<IInputs>, notifyOutputChanged: () => void, state: ComponentFramework.Dictionary, container:HTMLDivElement): void {\n\t  // Add control initialization code\n\t  this._notifyOutputChanged = notifyOutputChanged\n\t  this._root = createRoot(container!)\n\n\t  this._appprops = {\n\t    context: context,\n\t    instanceid: Math.random(),\n\t    onChange: this.onChange\n\t  }\n\t}\n\n\t/**\n\t * Called when any value in the property bag has changed. This includes field values, data-sets, global values such as container height and width, offline status, control metadata values such as label, visible, etc.\n\t * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to names defined in the manifest, as well as utility functions\n\t */\n\tpublic updateView (context: ComponentFramework.Context<IInputs>): void {\n\t  this._appprops.context = context\n\t  // RENDER React Component\n\t  this._root.render(createElement(LookupDropdownApp, this._appprops))\n\t}\n\n\tonChange = (newValue: ComponentFramework.LookupValue[] | undefined): void => {\n\t  this._selectedValue = newValue\n\t  this._notifyOutputChanged()\n\t};\n\n\t/**\n\t * It is called by the framework prior to a control receiving new data.\n\t * @returns an object based on nomenclature defined in manifest, expecting object[s] for property marked as “bound” or “output”\n\t */\n\tpublic getOutputs (): IOutputs {\n\t  return {\n\t\t  lookupfield: this._selectedValue\n\t  }\n\t}\n\n\t/**\n\t * Called when the control is to be removed from the DOM tree. Controls should use this call for cleanup.\n\t * i.e. cancelling any pending remote calls, removing listeners, etc.\n\t */\n\tpublic destroy (): void {\n\t  // Add code to cleanup control if necessary\n\t  this._root.unmount()\n\t}\n}\n","\nexport const ImgDavid = \"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\"\n\n\nexport const ImgBetim = \"\"\n\n","import {\r\n    ComponentFrameworkMockGenerator,\r\n    EnumPropertyMock,\r\n    LookupPropertyMock,\r\n    ShkoOnline,\r\n    StringPropertyMock,\r\n  } from \"@shko.online/componentframework-mock\";\r\n  \r\n  import { LookupDropdown as Component } from \"../LookupDropdown/index\";\r\n  import { IInputs, IOutputs } from \"../LookupDropdown/generated/ManifestTypes\";\r\n  import { useArgs } from \"@storybook/client-api\";\r\n  import { ImgBetim, ImgDavid } from \"./mock/EntityImages\";\r\n\r\nexport interface StoryArgs {\r\n    customselecttext: string;\r\n    customtext: string;\r\n    dependentlookupfield: ComponentFramework.LookupValue;\r\n    lookupfield: ComponentFramework.LookupValue;\r\n    showOpenRecordButton: boolean;\r\n    showRecordImage: boolean;\r\n  }\r\n\r\nexport const renderGenerator = () => {\r\n    let container: HTMLDivElement;\r\n    let mockGenerator: ComponentFrameworkMockGenerator<IInputs, IOutputs>;\r\n  \r\n    return function () {\r\n      const [args, updateArgs] = useArgs<StoryArgs>();\r\n      if (!container) {\r\n        container = document.createElement(\"div\");\r\n        mockGenerator = new ComponentFrameworkMockGenerator(\r\n          Component,\r\n          {\r\n            customselecttext: StringPropertyMock,\r\n            customtext: StringPropertyMock,\r\n            dependentlookupfield: LookupPropertyMock,\r\n            lookupfield: LookupPropertyMock,\r\n            showOpenRecordButton: EnumPropertyMock<\"false\" | \"true\">,\r\n            showRecordImage: EnumPropertyMock<\"false\" | \"true\">,\r\n            sortByTextValue: EnumPropertyMock<\"false\" | \"true\">,\r\n          },\r\n          container\r\n        );\r\n  \r\n        mockGenerator.metadata.initMetadata([\r\n          {\r\n            LogicalName: \"contact\",\r\n            SchemaName: \"Contact\",\r\n            PrimaryIdAttribute: \"contactid\",\r\n            PrimaryNameAttribute: \"fullname\",\r\n            PrimaryImageAttribute: \"entityimage\",\r\n            ManyToOneRelationships: [],\r\n            OneToManyRelationships: [],\r\n          } as ShkoOnline.EntityMetadata,\r\n        ]);\r\n  \r\n        mockGenerator.context._parameters.lookupfield.security = {\r\n          editable: true,\r\n          readable: true,\r\n          secured: false,\r\n        };\r\n  \r\n        mockGenerator.context.webAPI.retrieveRecord.callsFake(\r\n          (entityType: string, id: string, options?: string) => {\r\n            if (entityType === \"savedquery\") {\r\n              return new Promise((resolve) =>\r\n                setTimeout(\r\n                  () =>\r\n                    resolve({\r\n                      returnedtypecode: \"contact\",\r\n                      fetchxml: `<fetch>\r\n                        <entity>\r\n                        </entity>\r\n                      </fetch>`,\r\n                      // eslint-disable-next-line no-undef\r\n                    } as ComponentFramework.WebApi.Entity),\r\n                  100\r\n                )\r\n              );\r\n            }\r\n            return new Promise((_resolve, reject) => {\r\n              setTimeout(() => reject(new Error(\"invalid\")), 100);\r\n            });\r\n          }\r\n        );\r\n  \r\n        mockGenerator.context.webAPI.retrieveMultipleRecords.callsFake(\r\n          (entityType: string, options?: string, maxPageSize?: number) => {\r\n            return new Promise((resolve) => {\r\n              resolve({\r\n                entities: [\r\n                  {\r\n                    contactid: \"1\",\r\n                    fullname: \"Betim Beja\",\r\n                    country: \"Albania\",\r\n                    entityimage: ImgBetim,\r\n                  },\r\n                  {\r\n                    contactid: \"2\",\r\n                    fullname: \"David Rivard\",\r\n                    country: \"Canada\",\r\n                    entityimage: ImgDavid,\r\n                  },\r\n                ],\r\n                nextLink: \"\",\r\n              });\r\n            });\r\n          }\r\n        );\r\n  \r\n        mockGenerator.onOutputChanged.callsFake(() => {\r\n          const { dependentlookupfield, lookupfield } =\r\n            mockGenerator.control.getOutputs?.() || {};\r\n          updateArgs({\r\n            lookupfield: lookupfield?.[0],\r\n            dependentlookupfield: dependentlookupfield?.[0],\r\n          });\r\n        });\r\n  \r\n        mockGenerator.context._SetCanvasItems({\r\n          lookupfield: args.lookupfield,\r\n          customselecttext: args.customselecttext,\r\n          customtext: args.customtext,\r\n        });\r\n  \r\n        mockGenerator.ExecuteInit();\r\n      }\r\n  \r\n      if (mockGenerator) {\r\n        mockGenerator.context._parameters.customselecttext._SetValue(\r\n          args.customselecttext\r\n        );\r\n        mockGenerator.context._parameters.customtext._SetValue(args.customtext);\r\n        mockGenerator.context._parameters.dependentlookupfield._SetValue(\r\n          args.dependentlookupfield\r\n        );\r\n        mockGenerator.context._parameters.lookupfield._SetValue(args.lookupfield);\r\n        mockGenerator.context._parameters.showOpenRecordButton._SetValue(\r\n          args.showOpenRecordButton ? \"true\" : \"false\"\r\n        );\r\n        mockGenerator.context._parameters.showRecordImage._SetValue(\r\n          args.showRecordImage ? \"true\" : \"false\"\r\n        );\r\n        mockGenerator.ExecuteUpdateView();\r\n      }\r\n  \r\n      return container;\r\n    };\r\n  };","import type { Meta, StoryObj } from \"@storybook/html\";\nimport { StoryArgs, renderGenerator } from \"./LookupDropdown.renderGenerator\";\nexport default ({\n  title: \"PCF Component/LookupDropdown\",\n  decorators: [Story => {\n    const container = document.createElement(\"div\");\n    container.style.margin = \"2em\";\n    container.style.padding = \"1em\";\n    container.style.maxWidth = \"350px\";\n    container.style.border = \"dotted 1px\";\n    const storyResult = Story();\n    if (typeof storyResult == \"string\") {\n      container.innerHTML = storyResult;\n    } else {\n      container.appendChild(storyResult);\n    }\n    return container;\n  }],\n  parameters: {\n    // More on Story layout: https://storybook.js.org/docs/html/configure/story-layout\n    layout: \"fullscreen\"\n  },\n  // More on argTypes: https://storybook.js.org/docs/html/api/argtypes\n  argTypes: {\n    isDisabled: {\n      name: \"Disabled\",\n      control: \"boolean\",\n      table: {\n        category: \"Mode\",\n        defaultValue: {\n          summary: \"false\"\n        }\n      }\n    },\n    isVisible: {\n      name: \"Visible\",\n      control: \"boolean\",\n      table: {\n        category: \"Mode\",\n        defaultValue: {\n          summary: \"true\"\n        }\n      }\n    },\n    customselecttext: {\n      name: \"Custom Select Text\",\n      control: \"text\"\n    },\n    customtext: {\n      name: \"Custom Text\",\n      control: \"text\"\n    },\n    showOpenRecordButton: {\n      name: \"Show Open Record\",\n      control: \"boolean\"\n    },\n    showRecordImage: {\n      name: \"Show Record Image\",\n      control: \"boolean\"\n    }\n  },\n  args: {\n    isVisible: true,\n    isDisabled: false\n  }\n} as Meta<StoryArgs>);\nexport const Primary = ({\n  render: renderGenerator(),\n  args: {\n    customselecttext: \"Custom Select\",\n    customtext: undefined,\n    showOpenRecordButton: true,\n    showRecordImage: true\n  },\n  parameters: {\n    controls: {\n      expanded: true\n    }\n  }\n} as StoryObj<StoryArgs>);\nexport const CustomText = ({\n  render: renderGenerator(),\n  args: {\n    customselecttext: \"Custom Select\",\n    customtext: \"{fullname} - {country} - MVP\",\n    showOpenRecordButton: true,\n    showRecordImage: true\n  }\n} as StoryObj<StoryArgs>);\nexport const Selected = ({\n  render: renderGenerator(),\n  args: {\n    lookupfield: {\n      name: \"David Rivard\",\n      id: \"2\",\n      entityType: \"contact\"\n    },\n    customselecttext: \"Custom Select\",\n    customtext: undefined,\n    showOpenRecordButton: true,\n    showRecordImage: true\n  }\n} as StoryObj<StoryArgs>);\nexport const LongText = ({\n  render: renderGenerator(),\n  args: {\n    customselecttext: \"Custom Select\",\n    customtext: \"{fullname} - {country} - MVP | and a very long text to test the control\",\n    showOpenRecordButton: true,\n    showRecordImage: true\n  }\n} as StoryObj<StoryArgs>);\nPrimary.parameters = {\n  ...Primary.parameters,\n  docs: {\n    ...Primary.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: renderGenerator(),\\n  args: {\\n    customselecttext: \\\"Custom Select\\\",\\n    customtext: undefined,\\n    showOpenRecordButton: true,\\n    showRecordImage: true\\n  },\\n  parameters: {\\n    controls: {\\n      expanded: true\\n    }\\n  }\\n} as StoryObj<StoryArgs>\",\n      ...Primary.parameters?.docs?.source\n    }\n  }\n};\nCustomText.parameters = {\n  ...CustomText.parameters,\n  docs: {\n    ...CustomText.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: renderGenerator(),\\n  args: {\\n    customselecttext: \\\"Custom Select\\\",\\n    customtext: \\\"{fullname} - {country} - MVP\\\",\\n    showOpenRecordButton: true,\\n    showRecordImage: true\\n  }\\n} as StoryObj<StoryArgs>\",\n      ...CustomText.parameters?.docs?.source\n    }\n  }\n};\nSelected.parameters = {\n  ...Selected.parameters,\n  docs: {\n    ...Selected.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: renderGenerator(),\\n  args: {\\n    lookupfield: {\\n      name: \\\"David Rivard\\\",\\n      id: \\\"2\\\",\\n      entityType: \\\"contact\\\"\\n    },\\n    customselecttext: \\\"Custom Select\\\",\\n    customtext: undefined,\\n    showOpenRecordButton: true,\\n    showRecordImage: true\\n  }\\n} as StoryObj<StoryArgs>\",\n      ...Selected.parameters?.docs?.source\n    }\n  }\n};\nLongText.parameters = {\n  ...LongText.parameters,\n  docs: {\n    ...LongText.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: renderGenerator(),\\n  args: {\\n    customselecttext: \\\"Custom Select\\\",\\n    customtext: \\\"{fullname} - {country} - MVP | and a very long text to test the control\\\",\\n    showOpenRecordButton: true,\\n    showRecordImage: true\\n  }\\n} as StoryObj<StoryArgs>\",\n      ...LongText.parameters?.docs?.source\n    }\n  }\n};"],"names":["PcfContextProvider","pcfcontext","children","PcfContext","Provider","value","createContext","usePcfContext","useContext","PcfContextService","constructor","props","this","instanceid","context","viewid","parameters","lookupfield","getViewId","isReadOnly","mode","isControlDisabled","security","editable","isMasked","readable","showRecordImage","raw","selectedValue","dependentValue","dependentlookupfield","dependentEntityName","dependentAttributeType","filterRelationshipName","customtext","customText","indexOf","split","find","langcustomtext","userSettings","languageId","toString","onChange","CustomTextAttributes","match","SelectText","customselecttext","resources","getString","replaceAll","string","search","replace","join","getRecordText","record","primaryname","forEach","attribute","formatedValue","getAttributes","primaryid","primaryimage","attributes","includes","push","getLookupRecords","entityname","fetchxml","metadata","fetchxmldoc","DOMParser","parseFromString","entityelement","getElementsByTagName","querySelectorAll","el","remove","customattribute","createElement","setAttribute","appendChild","id","manytoonerelationship","ManyToOneRelationships","getByName","onetomanyrelationship","OneToManyRelationships","manytomanyrelationship","ManyToManyRelationships","linkentity","getManyToOneLinkEntity","getOneToManyLinkEntity","getManyToManyLinkEntity","fetchxmlstring","XMLSerializer","serializeToString","result","webAPI","retrieveMultipleRecords","entities","sortByTextValue","sort","a","b","aText","bText","localeCompare","from","to","ReferencingAttribute","document","filter","condition","baseentityname","intersectentity","IntersectEntityName","intersectFromTo","Entity1LogicalName","Entity1IntersectAttribute","Entity2IntersectAttribute","dependententity","Entity2LogicalName","dependententityFromTo","linkentity1","linkentity2","getLookupView","retrieveRecord","getEntityMetadata","utils","openRecord","navigation","openForm","entityName","entityId","useLookupView","useQuery","staleTime","Infinity","data","returnedtypecode","isLoading","isError","openbuttonicon","iconName","IconButton","iconProps","title","ariaLabel","disabled","onClick","useMetadata","enabled","PrimaryIdAttribute","PrimaryNameAttribute","PrimaryImageAttribute","manytoonerelationships","onetomanyrelationships","useRecordsAsOptions","records","useRecords","options","key","text","concat","map","e","imagesrc","recordname","dropdownTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","dropdownStyles","color","display","fontWeight","isOpen","fontStretch","borderWidth","borderStyle","borderColor","backgroundColor","outline","outlineColor","outlineOffset","boxSizing","height","width","verticalAlign","selectors","boxShadow","dropdown","border","dropdownItem","marginBottom","dropdownItemSelected","dropdownOptionText","overflow","whiteSpace","caretDown","caretDownWrapper","borderLeft","paddingLeft","dropdownIconOptionStyle","marginRight","marginTop","dropdownIcontitleStyle","dropdownTextStyle","dropdownTitleStyles","textOverflow","dropdownTitleSpanStyles","position","dropdownStackItemStyle","dropdownRef","useRef","useEffect","length","some","option","_a","placeholder","name","onRenderPlaceholder","style","onDropdownChanged","event","index","lookupvalue","entityType","onRenderOption","ImageIcon","imageProps","src","onRenderTitle","Stack","horizontal","wrap","grow","Dropdown","componentRef","selectedKey","styles","theme","showOpenRecordButton","maskedinputclass","fontSize","margin","tokens","childrenGap","FontIcon","className","TextField","queryClient","QueryClient","queryCache","QueryCache","defaultOptions","queries","refetchOnMount","refetchOnWindowFocus","pcfcontextservice","QueryClientProvider","client","contextSharing","disableWarnings","newValue","_selectedValue","_notifyOutputChanged","init","notifyOutputChanged","state","container","_root","createRoot","_appprops","Math","random","updateView","render","getOutputs","destroy","unmount","renderGenerator","mockGenerator","args","updateArgs","useArgs","initMetadata","LogicalName","SchemaName","_parameters","secured","callsFake","Promise","resolve","setTimeout","_resolve","reject","Error","maxPageSize","contactid","fullname","country","entityimage","nextLink","onOutputChanged","control","_SetCanvasItems","ExecuteInit","_SetValue","ExecuteUpdateView","decorators","Story","padding","maxWidth","storyResult","innerHTML","layout","argTypes","isDisabled","table","category","defaultValue","summary","isVisible","Primary","controls","expanded","CustomText","Selected","LongText","docs","source","originalSource"],"sourceRoot":""}